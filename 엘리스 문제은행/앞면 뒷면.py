'''
N명의 사람이 카드게임을 한다.
게임의 규칙 
1. 1~N의 숫자가 적힌 카드를 앞면이 보이도록 놓는다.
2. 첫 번째 사람이 1의 배수에 해당하는 번호의 카드를 모두 뒤집는다.
3. 마찬가지로 i번째의 사람이 i의 배수에 해당하는 번호의 카드를 모두 뒤집는다.
4. 그렇게 N번째의 사람까지 모두 실행하고나서 뒷면을 보이는 카드의 수를 세는 것이다.

입력은 참여하는 사람과 카드의 수인 N을 입력한다.
(1 <= N <= 2100000000)
입력 예)
3
출력은 뒷면을 보이는 카드의 수를 출력한다.
출력 예)
1

문제풀이의 첫 접근은 에라토스테네스의 체였다.
for문을 돌며 각 숫자의 배수를 모두 뒤집으려 했으나 N의 범위가 너무 넓어 시간초과가 됐다.
그러다 뒷면을 보이는 카드는 자신의 약수가 홀수개인 수임을 알았고 
약수가 홀수개인 수는 제곱수임을 알았다. (1 제외)

for문을 돌며 해당 숫자의 제곱수가 범위 내에 있으면 count변수에 1씩 더해주었으나,
역시 시간초과가 됐다.

딕셔너리를 이용해 제곱수:1 의 형태로 값을 추가했고 value값들의 합을 구하니 시간초과 문제를 해결했다.
'''
n = int(input())
cards = {}
ck = range(1, int(n**0.5 + 1)+1)
nums = range(1,n+1)

for i in range(1, len(ck)):
    cards[i**2+1] = 1

print(sum(cards.values()))

